name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: fraudguard-hackathon
  REGISTRY: us-docker.pkg.dev
  REPOSITORY: fraudguard
  CLUSTER_NAME: fraudguard-auto
  CLUSTER_ZONE: us-central1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black pytest pytest-asyncio
        
        # Install service dependencies
        for service in services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            pip install -r "$service/requirements.txt"
          fi
        done
        
        # Install dashboard dependencies
        if [ -f "services/dashboard/requirements.txt" ]; then
          pip install -r "services/dashboard/requirements.txt"
        fi

    - name: Lint with ruff
      run: |
        ruff check services/ web/ --fix || echo "Ruff linting completed with warnings"

    - name: Format check with black
      run: |
        black services/ web/ || echo "Black formatting completed with warnings"

    - name: Run tests
      run: |
        # Run service tests
        for service in services/*/; do
          if [ -f "$service/test_*.py" ] || [ -d "$service/tests/" ]; then
            echo "Running tests for $service"
            cd "$service" && python -m pytest . && cd ../..
          fi
        done
        
        # Run dashboard tests
        if ls services/dashboard/test_*.py >/dev/null 2>&1 || [ -d "services/dashboard/tests/" ]; then
          echo "Running dashboard tests"
          cd services/dashboard && python -m pytest . && cd ../..
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/fixissue'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud (WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER_NAME }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker us-docker.pkg.dev --quiet

    - name: Build and push Docker images
      run: |
        SHA="${{ github.sha }}"
        case "${{ github.ref }}" in
          refs/heads/main) TAG="latest" ;;
          refs/heads/develop) TAG="dev" ;;
          refs/heads/fixissue) TAG="hackathon" ;;
          *) TAG="dev" ;;
        esac

        SERVICES="mcp-gateway risk-scorer explain-agent action-orchestrator boa-monitor dashboard"
        for service in $SERVICES; do
          BASE="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/$service"
          docker build -t "$BASE:$SHA" services/$service/
          docker push "$BASE:$SHA"
          docker tag "$BASE:$SHA" "$BASE:$TAG"
          docker push "$BASE:$TAG"
        done

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/fixissue'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud (WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER_NAME }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Enable GKE auth plugin
      run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
          --region ${{ env.CLUSTER_ZONE }} \
          --project ${{ env.PROJECT_ID }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to GKE
      run: |
        # Set namespace based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="fraudguard-prod"
        else
          NAMESPACE="fraudguard"
        fi

        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

        # Deploy all services with Helm, pinning image.tag to commit SHA to force rollout
        SERVICES=("mcp-gateway" "risk-scorer" "explain-agent" "action-orchestrator" "dashboard" "boa-monitor")
        for service in "${SERVICES[@]}"; do
          echo "Deploying $service..."
          if ! helm upgrade --install "$service" ./helm/workload \
            -f "values/$service.yaml" \
            -n "$NAMESPACE" \
            --set image.tag="${{ github.sha }}" \
            --atomic --wait --timeout=600s; then
            echo "Helm failed for $service â€“ diagnostics:"
            kubectl get pods -n "$NAMESPACE" -o wide || true
            kubectl describe deploy/"$service" -n "$NAMESPACE" || true
            kubectl describe pods -n "$NAMESPACE" | tail -n +1 || true
            exit 1
          fi
        done

        # Apply external LoadBalancer services (optional but consistent with deploy.yml)
        kubectl apply -f k8s/external-services.yaml || true

    - name: Verify deployment
      run: |
        # Set namespace based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="fraudguard-prod"
        else
          NAMESPACE="fraudguard"
        fi
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment --all -n $NAMESPACE
        
        # Check pod status
        kubectl get pods -n $NAMESPACE
        
        # Test health endpoints
        kubectl port-forward -n $NAMESPACE svc/dashboard 8080:8080 &
        sleep 10
        curl -f http://localhost:8080/healthz || exit 1
