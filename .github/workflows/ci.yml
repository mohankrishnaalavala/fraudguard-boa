name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, fixissue ]
  pull_request:
    branches: [ main, develop ]

env:
  PROJECT_ID: fraudguard-hackathon
  REGISTRY: us-docker.pkg.dev
  REPOSITORY: fraudguard
  CLUSTER_NAME: fraudguard-auto
  CLUSTER_ZONE: us-central1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black pytest pytest-asyncio
        
        # Install service dependencies
        for service in services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            pip install -r "$service/requirements.txt"
          fi
        done
        
        # Install dashboard dependencies
        if [ -f "web/dashboard/requirements.txt" ]; then
          pip install -r "web/dashboard/requirements.txt"
        fi

    - name: Lint with ruff
      run: |
        ruff check services/ web/ --fix || true

    - name: Format check with black
      run: |
        black services/ web/ || true

    - name: Run tests
      run: |
        # Run service tests
        for service in services/*/; do
          if [ -f "$service/test_*.py" ] || [ -d "$service/tests/" ]; then
            echo "Running tests for $service"
            cd "$service" && python -m pytest . && cd ../..
          fi
        done
        
        # Run dashboard tests
        if [ -f "web/dashboard/test_*.py" ] || [ -d "web/dashboard/tests/" ]; then
          echo "Running dashboard tests"
          cd web/dashboard && python -m pytest . && cd ../..
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER_NAME }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Build and push Docker images
      run: |
        # Set image tag based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAG="latest"
        else
          TAG="dev"
        fi
        
        # Build and push all service images
        SERVICES="mcp-gateway txn-watcher risk-scorer explain-agent action-orchestrator"
        for service in $SERVICES; do
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/$service:$TAG"
          docker build -t $IMAGE_NAME services/$service/
          docker push $IMAGE_NAME
        done
        
        # Build and push dashboard
        DASHBOARD_IMAGE="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/dashboard:$TAG"
        docker build -t $DASHBOARD_IMAGE web/dashboard/
        docker push $DASHBOARD_IMAGE

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER_NAME }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.CLUSTER_ZONE }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to GKE
      run: |
        # Set namespace based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="fraudguard-prod"
          TAG="latest"
        else
          NAMESPACE="fraudguard"
          TAG="dev"
        fi
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy all services
        make deploy-all NAMESPACE=$NAMESPACE TAG=$TAG

    - name: Verify deployment
      run: |
        # Set namespace based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="fraudguard-prod"
        else
          NAMESPACE="fraudguard"
        fi
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment --all -n $NAMESPACE
        
        # Check pod status
        kubectl get pods -n $NAMESPACE
        
        # Test health endpoints
        kubectl port-forward -n $NAMESPACE svc/dashboard 8080:8080 &
        sleep 10
        curl -f http://localhost:8080/healthz || exit 1
